# For this project, I downloaded Spotify data from Kaggle.
# Then I created a table to insert Spotify data into.
# Finally, I performed analytics on the data using SQL. 

#Creating the table: 
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 
)

#Then I inserted the Spotify Data .csv into the table.

#Next, I explored the data using the following SQL. 

--Who are the top 10 artists based on popularity?--
SELECT 
DISTINCT artist_name AS Top_10_Artists,
popularity
FROM BIT_DB.Spotifydata
ORDER BY popularity DESC
LIMIT 10;

--Which artists are the top 5 least favorite based on popularity?--
SELECT
DISTINCT artist_name AS Least_Fav_Artists
FROM BIT_DB.Spotifydata
ORDER BY popularity ASC
LIMIT 5;

--What track is the most popular and who sings it?--
SELECT
track_name AS song,
artist_name AS artist
FROM BIT_DB.Spotifydata
ORDER BY popularity DESC
LIMIT 1;

--What is the avg popularity, danceability, and energy by artist and track.--
SELECT
artist_name,
track_name,
AVG(popularity),
AVG(danceability),
AVG(energy)
FROM BIT_DB.Spotifydata
GROUP BY artist_name, track_name;

--Which artist has the best track danceability and what is the name of the track?--
SELECT 
DISTINCT artist_name, 
track_name,
danceability
FROM BIT_DB.spotifydata
ORDER BY danceability desc
LIMIT 1;
